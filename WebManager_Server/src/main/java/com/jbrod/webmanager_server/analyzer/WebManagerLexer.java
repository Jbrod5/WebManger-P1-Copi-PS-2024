// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: WebManager.flex

/* CODIGO DE USUARIO */
package com.jbrod.webmanager_server.analyzer;
import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
public class WebManagerLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\5\1\22\0\1\1\1\0\1\2\1\3\1\4"+
    "\7\0\1\1\1\5\1\1\1\6\2\7\1\10\1\11"+
    "\6\12\1\1\1\13\1\14\1\15\1\16\2\0\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\31"+
    "\1\47\1\50\1\0\1\51\1\0\1\52\1\0\1\53"+
    "\1\54\1\55\1\56\1\57\1\56\1\60\1\31\1\61"+
    "\2\31\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\4\31\12\0\1\1\32\0"+
    "\1\1\100\0\1\75\u019e\0\1\1\177\0\13\1\35\0"+
    "\2\1\5\0\1\1\57\0\1\1\240\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\30\0\1\2\1\0\1\3\1\0\1\4"+
    "\1\5\70\0\1\6\7\0\1\7\25\0\1\10\15\0"+
    "\1\11\3\0\1\12\1\13\12\0\1\14\1\15\2\0"+
    "\1\16\4\0\1\17\11\0\1\20\1\21\5\0\1\22"+
    "\1\23\4\0\1\24\1\25\1\0\1\26\1\27\1\30"+
    "\5\0\1\31\1\32\1\33\55\0\1\34\71\0\1\35"+
    "\42\0\1\36\1\37\1\0\1\40\17\0\1\41\1\42"+
    "\1\43\2\0\1\44\1\0\1\45\15\0\1\46\1\47"+
    "\24\0\1\50\10\0\1\51\4\0\1\52\23\0\1\53"+
    "\10\0\1\54\5\0\1\55\6\0\1\56\2\0\1\57"+
    "\11\0\1\60\1\0\1\61\4\0\1\62\1\63\2\0"+
    "\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[477];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2"+
    "\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554\0\u0592"+
    "\0\u05d0\0\u060e\0\u064c\0\u068a\0\76\0\u06c8\0\76\0\u0706"+
    "\0\76\0\76\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a"+
    "\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a"+
    "\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a"+
    "\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a"+
    "\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a"+
    "\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a"+
    "\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a"+
    "\0\u1458\0\u1496\0\76\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc"+
    "\0\u160a\0\u1648\0\76\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e"+
    "\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e"+
    "\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e"+
    "\0\76\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10"+
    "\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u1e84\0\76\0\u1ec2"+
    "\0\u1f00\0\u1f3e\0\76\0\76\0\u1f7c\0\u1fba\0\u1ff8\0\u2036"+
    "\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa\0\76\0\76"+
    "\0\u21e8\0\u2226\0\76\0\u2264\0\u22a2\0\u22e0\0\u231e\0\76"+
    "\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0\0\u250e"+
    "\0\u254c\0\76\0\76\0\u258a\0\u25c8\0\u2606\0\u2644\0\u2682"+
    "\0\76\0\76\0\u26c0\0\u26fe\0\u273c\0\u277a\0\76\0\76"+
    "\0\u27b8\0\76\0\76\0\76\0\u27f6\0\u2834\0\u2872\0\u28b0"+
    "\0\u28ee\0\76\0\76\0\76\0\u292c\0\u296a\0\u29a8\0\u29e6"+
    "\0\u2a24\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6"+
    "\0\u2c14\0\u2c52\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6"+
    "\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a\0\u2f78\0\u2fb6"+
    "\0\u2ff4\0\u3032\0\u3070\0\u30ae\0\u30ec\0\u312a\0\u3168\0\u31a6"+
    "\0\u31e4\0\u3222\0\u3260\0\u329e\0\u32dc\0\u331a\0\u3358\0\u3396"+
    "\0\u33d4\0\76\0\u3412\0\u3450\0\u348e\0\u34cc\0\u350a\0\u3548"+
    "\0\u3586\0\u35c4\0\u3602\0\u3640\0\u367e\0\u36bc\0\u36fa\0\u3738"+
    "\0\u3776\0\u37b4\0\u37f2\0\u3830\0\u386e\0\u38ac\0\u38ea\0\u3928"+
    "\0\u3966\0\u39a4\0\u39e2\0\u3a20\0\u3a5e\0\u3a9c\0\u3ada\0\u3b18"+
    "\0\u3b56\0\u3b94\0\u3bd2\0\u3c10\0\u3c4e\0\u3c8c\0\u3cca\0\u3d08"+
    "\0\u3d46\0\u3d84\0\u3dc2\0\u3e00\0\u3e3e\0\u3e7c\0\u3eba\0\u3ef8"+
    "\0\u3f36\0\u3f74\0\u3fb2\0\u3ff0\0\u402e\0\u406c\0\u40aa\0\u40e8"+
    "\0\u4126\0\u4164\0\u41a2\0\76\0\u41e0\0\u421e\0\u425c\0\u429a"+
    "\0\u42d8\0\u4316\0\u4354\0\u4392\0\u43d0\0\u440e\0\u444c\0\u448a"+
    "\0\u44c8\0\u4506\0\u4544\0\u4582\0\u45c0\0\u45fe\0\u463c\0\u467a"+
    "\0\u46b8\0\u46f6\0\u4734\0\u4772\0\u47b0\0\u47ee\0\u482c\0\u486a"+
    "\0\u48a8\0\u48e6\0\u4924\0\u4962\0\u49a0\0\u49de\0\76\0\76"+
    "\0\u4a1c\0\76\0\u4a5a\0\u4a98\0\u4ad6\0\u4b14\0\u4b52\0\u4b90"+
    "\0\u4bce\0\u4c0c\0\u4c4a\0\u4c88\0\u4cc6\0\u4d04\0\u4d42\0\u4d80"+
    "\0\u4dbe\0\76\0\76\0\76\0\u4dfc\0\u4e3a\0\76\0\u4e78"+
    "\0\76\0\u4eb6\0\u4ef4\0\u4f32\0\u4f70\0\u4fae\0\u4fec\0\u502a"+
    "\0\u5068\0\u50a6\0\u50e4\0\u5122\0\u5160\0\u519e\0\76\0\76"+
    "\0\u51dc\0\u521a\0\u5258\0\u5296\0\u52d4\0\u5312\0\u5350\0\u538e"+
    "\0\u53cc\0\u540a\0\u5448\0\u5486\0\u54c4\0\u5502\0\u5540\0\u557e"+
    "\0\u55bc\0\u55fa\0\u5638\0\u5676\0\76\0\u56b4\0\u56f2\0\u5730"+
    "\0\u576e\0\u57ac\0\u57ea\0\u5828\0\u5866\0\76\0\u58a4\0\u58e2"+
    "\0\u5920\0\u595e\0\76\0\u599c\0\u59da\0\u5a18\0\u5a56\0\u5a94"+
    "\0\u5ad2\0\u5b10\0\u5b4e\0\u5b8c\0\u5bca\0\u5c08\0\u5c46\0\u5c84"+
    "\0\u5cc2\0\u5d00\0\u5d3e\0\u5d7c\0\u5dba\0\u5df8\0\76\0\u5e36"+
    "\0\u5e74\0\u5eb2\0\u5ef0\0\u5f2e\0\u5f6c\0\u5faa\0\u5fe8\0\76"+
    "\0\u6026\0\u6064\0\u60a2\0\u60e0\0\u611e\0\76\0\u615c\0\u619a"+
    "\0\u61d8\0\u6216\0\u6254\0\u6292\0\76\0\u62d0\0\u630e\0\76"+
    "\0\u634c\0\u638a\0\u63c8\0\u6406\0\u6444\0\u6482\0\u64c0\0\u64fe"+
    "\0\u653c\0\76\0\u657a\0\76\0\u65b8\0\u65f6\0\u6634\0\u6672"+
    "\0\76\0\76\0\u66b0\0\u66ee\0\76";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[477];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\14\2\1\3\33\2\1\4\25\2\104\0\1\5\44\0"+
    "\1\6\3\0\1\7\6\0\1\10\10\0\1\11\1\0"+
    "\1\12\2\13\1\0\4\14\1\15\3\0\2\11\1\16"+
    "\1\17\4\11\1\20\1\21\2\11\1\22\2\11\1\23"+
    "\3\11\1\24\1\11\1\25\3\11\2\0\1\13\22\11"+
    "\54\0\1\26\3\0\1\27\6\0\1\30\64\0\1\31"+
    "\14\0\1\32\75\0\1\33\56\0\1\34\23\0\1\11"+
    "\5\0\4\11\1\15\3\0\31\11\1\0\1\35\1\0"+
    "\22\11\10\0\4\36\4\0\6\36\26\0\5\36\22\0"+
    "\2\13\1\0\4\13\4\0\31\13\1\0\1\37\23\13"+
    "\2\0\1\11\5\0\4\40\1\15\3\0\31\11\1\0"+
    "\1\41\1\0\22\11\2\0\1\15\5\0\5\15\3\0"+
    "\31\15\1\0\1\42\1\0\22\15\2\0\1\11\5\0"+
    "\4\11\1\15\3\0\4\11\1\43\24\11\1\0\1\35"+
    "\1\0\22\11\2\0\1\11\5\0\4\11\1\15\3\0"+
    "\4\11\1\44\24\11\1\0\1\35\1\0\22\11\2\0"+
    "\1\11\5\0\4\11\1\15\3\0\14\11\1\45\13\11"+
    "\1\46\1\0\1\35\1\0\22\11\2\0\1\11\5\0"+
    "\4\11\1\15\3\0\24\11\1\47\4\11\1\0\1\35"+
    "\1\0\22\11\2\0\1\11\5\0\4\11\1\15\3\0"+
    "\4\11\1\50\24\11\1\0\1\35\1\0\22\11\2\0"+
    "\1\11\5\0\4\11\1\15\3\0\1\51\30\11\1\0"+
    "\1\35\1\0\22\11\2\0\1\11\5\0\4\11\1\15"+
    "\3\0\10\11\1\52\20\11\1\0\1\35\1\0\22\11"+
    "\2\0\1\11\5\0\4\11\1\15\3\0\10\11\1\53"+
    "\20\11\1\0\1\35\1\0\22\11\56\0\1\54\14\0"+
    "\1\55\75\0\1\56\56\0\1\57\77\0\1\60\110\0"+
    "\1\61\66\0\1\62\104\0\1\63\14\0\4\64\4\0"+
    "\6\64\26\0\5\64\17\0\1\11\5\0\4\65\1\15"+
    "\3\0\31\11\1\0\1\41\1\0\22\11\2\0\1\11"+
    "\5\0\4\11\1\15\3\0\15\11\1\66\13\11\1\0"+
    "\1\35\1\0\22\11\2\0\1\11\5\0\4\11\1\15"+
    "\3\0\21\11\1\67\7\11\1\0\1\35\1\0\22\11"+
    "\2\0\1\11\5\0\4\11\1\15\3\0\1\70\30\11"+
    "\1\0\1\35\1\0\22\11\2\0\1\11\5\0\4\11"+
    "\1\15\3\0\20\11\1\71\10\11\1\0\1\35\1\0"+
    "\22\11\2\0\1\11\5\0\4\11\1\15\3\0\22\11"+
    "\1\72\6\11\1\0\1\35\1\0\22\11\2\0\1\11"+
    "\5\0\4\11\1\15\3\0\15\11\1\73\13\11\1\0"+
    "\1\35\1\0\22\11\2\0\1\11\5\0\4\11\1\15"+
    "\3\0\21\11\1\74\7\11\1\0\1\35\1\0\22\11"+
    "\2\0\1\11\5\0\4\11\1\15\3\0\23\11\1\75"+
    "\5\11\1\0\1\35\1\0\22\11\2\0\1\11\5\0"+
    "\4\11\1\15\3\0\3\11\1\76\25\11\1\0\1\35"+
    "\1\0\22\11\56\0\1\77\110\0\1\100\66\0\1\101"+
    "\104\0\1\102\66\0\1\103\75\0\1\104\103\0\1\105"+
    "\61\0\1\106\31\0\4\107\4\0\6\107\26\0\5\107"+
    "\17\0\1\11\5\0\4\110\1\15\3\0\31\11\1\0"+
    "\1\41\1\0\22\11\2\0\1\11\5\0\4\11\1\15"+
    "\3\0\23\11\1\111\5\11\1\0\1\35\1\0\22\11"+
    "\2\0\1\11\5\0\4\11\1\15\3\0\4\11\1\112"+
    "\24\11\1\0\1\35\1\0\22\11\2\0\1\11\5\0"+
    "\4\11\1\15\3\0\6\11\1\113\22\11\1\0\1\35"+
    "\1\0\22\11\2\0\1\11\5\0\4\11\1\15\3\0"+
    "\24\11\1\114\4\11\1\0\1\35\1\0\22\11\2\0"+
    "\1\11\5\0\4\11\1\15\3\0\23\11\1\115\5\11"+
    "\1\0\1\35\1\0\22\11\2\0\1\11\5\0\4\11"+
    "\1\15\3\0\24\11\1\116\4\11\1\0\1\35\1\0"+
    "\22\11\2\0\1\11\5\0\4\11\1\15\3\0\21\11"+
    "\1\117\7\11\1\0\1\35\1\0\22\11\2\0\1\11"+
    "\5\0\4\11\1\15\3\0\24\11\1\120\4\11\1\0"+
    "\1\35\1\0\22\11\2\0\1\11\5\0\4\11\1\15"+
    "\3\0\4\11\1\121\24\11\1\0\1\35\1\0\22\11"+
    "\62\0\1\122\75\0\1\123\103\0\1\124\61\0\1\125"+
    "\107\0\1\126\64\0\1\127\114\0\1\130\65\0\1\131"+
    "\21\0\4\132\4\0\6\132\24\0\1\133\1\0\5\132"+
    "\17\0\1\11\3\0\1\134\1\0\4\135\1\15\3\0"+
    "\31\11\1\0\1\41\1\0\22\11\2\0\1\11\5\0"+
    "\4\11\1\15\3\0\21\11\1\136\7\11\1\0\1\35"+
    "\1\0\22\11\2\0\1\11\5\0\4\11\1\15\3\0"+
    "\2\11\1\137\26\11\1\0\1\35\1\0\22\11\2\0"+
    "\1\11\5\0\4\11\1\15\3\0\4\11\1\140\24\11"+
    "\1\0\1\35\1\0\22\11\2\0\1\11\5\0\4\11"+
    "\1\15\3\0\10\11\1\141\20\11\1\0\1\35\1\0"+
    "\22\11\2\0\1\11\5\0\4\11\1\15\3\0\10\11"+
    "\1\142\20\11\1\0\1\35\1\0\22\11\2\0\1\11"+
    "\5\0\4\11\1\15\3\0\31\11\1\0\1\143\1\0"+
    "\22\11\2\0\1\11\5\0\4\11\1\15\3\0\1\144"+
    "\30\11\1\0\1\35\1\0\22\11\2\0\1\11\5\0"+
    "\4\11\1\15\3\0\13\11\1\145\15\11\1\0\1\35"+
    "\1\0\22\11\2\0\1\11\5\0\4\11\1\15\3\0"+
    "\16\11\1\146\12\11\1\0\1\35\1\0\22\11\66\0"+
    "\1\147\64\0\1\150\114\0\1\151\65\0\1\152\76\0"+
    "\1\153\104\0\1\154\61\0\1\155\75\0\1\156\25\0"+
    "\4\157\4\0\6\157\26\0\5\157\25\0\1\160\1\161"+
    "\66\0\1\11\5\0\4\135\1\15\3\0\31\11\1\0"+
    "\1\41\1\0\22\11\2\0\1\11\5\0\4\11\1\15"+
    "\3\0\1\162\30\11\1\0\1\35\1\0\22\11\2\0"+
    "\1\11\5\0\4\11\1\15\3\0\7\11\1\163\21\11"+
    "\1\0\1\35\1\0\22\11\2\0\1\11\5\0\4\11"+
    "\1\15\3\0\15\11\1\164\13\11\1\0\1\35\1\0"+
    "\22\11\2\0\1\11\5\0\4\11\1\15\3\0\4\11"+
    "\1\165\24\11\1\0\1\35\1\0\22\11\2\0\1\11"+
    "\5\0\4\11\1\15\3\0\5\11\1\166\23\11\1\0"+
    "\1\35\1\0\22\11\2\0\1\11\5\0\4\11\1\15"+
    "\3\0\5\11\1\167\23\11\1\0\1\35\1\0\22\11"+
    "\2\0\1\11\5\0\4\11\1\15\3\0\16\11\1\170"+
    "\12\11\1\0\1\35\1\0\22\11\2\0\1\11\5\0"+
    "\4\11\1\15\3\0\31\11\1\0\1\171\1\0\22\11"+
    "\65\0\1\172\104\0\1\173\61\0\1\174\75\0\1\175"+
    "\75\0\1\176\4\0\1\177\103\0\1\200\75\0\1\201"+
    "\75\0\1\202\12\0\4\203\4\0\6\203\26\0\5\203"+
    "\25\0\4\204\72\0\3\204\65\0\1\11\5\0\4\11"+
    "\1\15\3\0\21\11\1\205\7\11\1\0\1\35\1\0"+
    "\22\11\2\0\1\11\5\0\4\11\1\15\3\0\1\206"+
    "\30\11\1\0\1\35\1\0\22\11\2\0\1\11\5\0"+
    "\4\11\1\15\3\0\31\11\1\0\1\207\1\0\22\11"+
    "\2\0\1\11\5\0\4\11\1\15\3\0\21\11\1\210"+
    "\7\11\1\0\1\35\1\0\22\11\2\0\1\11\5\0"+
    "\4\11\1\15\3\0\10\11\1\211\20\11\1\0\1\35"+
    "\1\0\22\11\2\0\1\11\5\0\4\11\1\15\3\0"+
    "\16\11\1\212\12\11\1\0\1\35\1\0\22\11\2\0"+
    "\1\11\5\0\4\11\1\15\3\0\31\11\1\0\1\213"+
    "\1\0\22\11\17\0\1\214\40\0\1\215\110\0\1\216"+
    "\75\0\1\217\75\0\1\220\74\0\1\221\71\0\1\222"+
    "\75\0\1\223\63\0\1\224\112\0\1\225\56\0\1\133"+
    "\31\0\1\226\71\0\1\11\5\0\4\11\1\15\3\0"+
    "\31\11\1\0\1\227\1\0\22\11\2\0\1\11\5\0"+
    "\4\11\1\15\3\0\31\11\1\0\1\230\1\0\22\11"+
    "\2\0\1\11\5\0\4\11\1\15\3\0\3\11\1\231"+
    "\25\11\1\0\1\35\1\0\22\11\2\0\1\11\5\0"+
    "\4\11\1\15\3\0\2\11\1\232\26\11\1\0\1\35"+
    "\1\0\22\11\2\0\1\11\5\0\4\11\1\15\3\0"+
    "\31\11\1\0\1\233\1\0\22\11\72\0\1\234\71\0"+
    "\1\235\63\0\1\236\112\0\1\237\23\0\1\240\142\0"+
    "\1\241\76\0\1\242\4\0\1\243\75\0\1\244\2\0"+
    "\1\245\66\0\1\246\17\0\4\247\64\0\1\11\5\0"+
    "\4\11\1\15\3\0\1\250\30\11\1\0\1\35\1\0"+
    "\22\11\2\0\1\11\5\0\4\11\1\15\3\0\1\251"+
    "\30\11\1\0\1\35\1\0\22\11\17\0\1\252\75\0"+
    "\1\253\52\0\1\254\75\0\1\255\71\0\1\256\64\0"+
    "\1\257\106\0\1\260\26\0\1\261\75\0\1\262\132\0"+
    "\1\263\106\0\1\264\4\0\1\265\13\0\4\266\36\0"+
    "\1\267\25\0\1\11\5\0\4\11\1\15\3\0\31\11"+
    "\1\0\1\270\1\0\22\11\2\0\1\11\5\0\4\11"+
    "\1\15\3\0\21\11\1\271\7\11\1\0\1\35\1\0"+
    "\22\11\17\0\1\272\75\0\1\273\75\0\1\274\52\0"+
    "\1\275\74\0\1\276\70\0\1\277\74\0\1\300\100\0"+
    "\1\301\26\0\1\302\130\0\1\267\25\0\1\11\5\0"+
    "\4\11\1\15\3\0\31\11\1\0\1\303\1\0\22\11"+
    "\17\0\1\304\136\0\1\305\72\0\1\306\106\0\1\307"+
    "\73\0\1\310\27\0\1\311\150\0\1\312\75\0\1\313"+
    "\61\0\1\314\23\0\1\315\152\0\1\316\33\0\1\317"+
    "\150\0\1\320\24\0\1\321\1\322\12\0\1\323\1\324"+
    "\56\0\1\325\62\0\1\326\152\0\1\327\43\0\1\330"+
    "\105\0\1\331\75\0\1\332\103\0\1\333\34\0\1\334"+
    "\77\0\2\335\44\0\1\335\40\0\1\336\120\0\1\337"+
    "\75\0\1\340\57\0\1\341\76\0\1\342\71\0\1\343"+
    "\1\0\1\344\13\0\1\345\4\0\1\346\35\0\1\347"+
    "\1\0\2\335\1\0\4\335\4\0\31\335\2\0\23\335"+
    "\3\0\1\350\116\0\1\351\112\0\1\352\64\0\1\353"+
    "\112\0\1\354\63\0\1\355\1\0\1\356\76\0\1\357"+
    "\100\0\1\360\60\0\1\361\70\0\1\362\100\0\1\363"+
    "\2\0\1\364\2\0\1\365\6\0\1\366\2\0\1\367"+
    "\1\370\1\371\57\0\1\372\67\0\1\373\102\0\1\374"+
    "\70\0\1\375\15\0\1\376\67\0\1\377\12\0\1\u0100"+
    "\54\0\1\u0101\106\0\1\u0102\72\0\1\u0103\114\0\1\u0104"+
    "\61\0\1\u0105\66\0\1\u0106\74\0\1\u0107\72\0\1\u0108"+
    "\105\0\1\u0109\75\0\1\u010a\107\0\1\u010b\53\0\1\u010c"+
    "\116\0\1\u010d\64\0\1\u010e\120\0\1\u010f\75\0\1\u0110"+
    "\57\0\1\u0111\104\0\1\u0112\60\0\1\u0113\104\0\1\u0114"+
    "\65\0\1\u0115\112\0\1\u0116\52\0\1\u0117\77\0\1\u0118"+
    "\56\0\1\u0119\115\0\1\u011a\2\0\1\u011b\112\0\1\u011c"+
    "\75\0\1\u011d\76\0\1\u011e\72\0\1\u011f\107\0\1\u0120"+
    "\44\0\1\u0121\112\0\1\u0122\100\0\1\u0123\57\0\1\u0124"+
    "\112\0\1\u0125\72\0\1\u0126\100\0\1\u0127\60\0\1\u0128"+
    "\107\0\1\u0129\101\0\1\u012a\62\0\1\u012b\65\0\1\u012c"+
    "\117\0\1\u012d\64\0\1\u012e\75\0\1\u012f\111\0\1\u0130"+
    "\51\0\1\u0131\130\0\1\u0132\44\0\1\u0133\14\0\1\u0134"+
    "\2\0\1\u0135\53\0\1\u0136\75\0\1\u0137\105\0\1\u0138"+
    "\65\0\1\u0139\75\0\1\u013a\60\0\1\u013b\75\0\1\u013c"+
    "\127\0\1\u013d\43\0\1\u013e\116\0\1\u013f\71\0\1\u0140"+
    "\101\0\1\u0141\106\0\1\u0142\76\0\1\u0143\72\0\1\u0144"+
    "\103\0\1\u0145\56\0\1\u0146\111\0\1\u0147\57\0\1\u0148"+
    "\105\0\1\u0149\106\0\1\u014a\62\0\1\u014b\112\0\1\u014c"+
    "\54\0\1\u014d\56\0\1\u014e\111\0\1\u014f\75\0\1\u0150"+
    "\61\0\1\u0151\111\0\1\u0152\61\0\1\u0153\145\0\1\u0154"+
    "\25\0\1\u0155\112\0\1\u0156\60\0\1\u0157\130\0\1\u0158"+
    "\67\0\1\u0159\103\0\1\u015a\73\0\1\u015b\67\0\1\u015c"+
    "\112\0\1\u015d\105\0\1\u015e\52\0\1\u015f\75\0\1\u0160"+
    "\75\0\1\u0161\64\0\1\u0162\75\0\1\u0163\75\0\1\u0164"+
    "\100\0\1\u0165\11\0\1\u0166\60\0\1\u0167\61\0\1\u0168"+
    "\111\0\1\u0169\61\0\1\u016a\130\0\1\u016b\73\0\1\u016c"+
    "\100\0\1\u016d\66\0\1\u016e\75\0\1\u016f\67\0\1\u0170"+
    "\14\0\1\u0171\73\0\1\u0172\76\0\1\u0173\75\0\1\u0174"+
    "\100\0\1\u0175\72\0\1\u0176\56\0\1\u0177\75\0\1\u0178"+
    "\131\0\1\u0179\61\0\1\u017a\74\0\1\u017b\74\0\1\u017c"+
    "\76\0\1\u017d\75\0\1\u017e\57\0\1\u017f\75\0\1\u0180"+
    "\130\0\1\u0181\57\0\1\u0182\64\0\1\u0183\74\0\1\u0184"+
    "\74\0\1\u0185\11\0\1\u0186\77\0\1\u0187\74\0\1\u0188"+
    "\60\0\1\u0189\130\0\1\u018a\56\0\1\u018b\67\0\1\u018c"+
    "\66\0\1\u018d\124\0\1\u018e\32\0\1\u018f\112\0\1\u0190"+
    "\105\0\1\u0191\106\0\1\u0192\72\0\1\u0193\74\0\1\u0194"+
    "\64\0\1\u0195\70\0\1\u0196\124\0\1\u0197\66\0\1\u0198"+
    "\66\0\1\u0199\71\0\1\u019a\70\0\1\u019b\100\0\1\u019c"+
    "\100\0\1\u019d\74\0\1\u019e\74\0\1\u019f\76\0\1\u01a0"+
    "\106\0\1\u01a1\64\0\1\u01a2\107\0\1\u01a3\74\0\1\u01a4"+
    "\61\0\1\u01a5\104\0\1\u01a6\75\0\1\u01a7\65\0\1\u01a8"+
    "\105\0\1\u01a9\102\0\1\u01aa\103\0\1\u01ab\53\0\1\u01ac"+
    "\111\0\1\u01ad\60\0\1\u01ae\74\0\1\u01af\114\0\1\u01b0"+
    "\61\0\1\u01b1\75\0\1\u01b2\100\0\1\u01b3\113\0\1\u01b4"+
    "\56\0\1\u01b5\147\0\1\u01b6\23\0\1\u01b7\70\0\1\u01b8"+
    "\113\0\1\u01b9\60\0\1\u01ba\105\0\1\u01bb\75\0\1\u01bc"+
    "\71\0\1\u01bd\70\0\1\u01be\137\0\1\u01bf\51\0\1\u01c0"+
    "\43\0\1\u01c1\114\0\1\u01c2\111\0\1\u01c3\61\0\1\u01c4"+
    "\72\0\1\u01c5\140\0\1\u01c6\56\0\1\u01c7\51\0\1\u01c8"+
    "\106\0\1\u01c9\102\0\1\u01ca\60\0\1\u01cb\142\0\1\u01cc"+
    "\34\0\1\u01cd\107\0\1\u01ce\42\0\1\u01cf\114\0\1\u01d0"+
    "\127\0\1\u01d1\40\0\1\u01d2\113\0\1\u01d3\57\0\1\u01d4"+
    "\106\0\1\u01d5\137\0\1\u01d6\6\0\1\u01d7\130\0\1\u01d8"+
    "\56\0\1\u01d9\75\0\1\u01da\113\0\1\u01db\43\0\1\u01dc"+
    "\111\0\1\u01dd\57\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[26412];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\30\0\1\11\1\0\1\11\1\0"+
    "\2\11\70\0\1\11\7\0\1\11\25\0\1\11\15\0"+
    "\1\11\3\0\2\11\12\0\2\11\2\0\1\11\4\0"+
    "\1\11\11\0\2\11\5\0\2\11\4\0\2\11\1\0"+
    "\3\11\5\0\3\11\55\0\1\11\71\0\1\11\42\0"+
    "\2\11\1\0\1\11\17\0\3\11\2\0\1\11\1\0"+
    "\1\11\15\0\2\11\24\0\1\11\10\0\1\11\4\0"+
    "\1\11\23\0\1\11\10\0\1\11\5\0\1\11\6\0"+
    "\1\11\2\0\1\11\11\0\1\11\1\0\1\11\4\0"+
    "\2\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[477];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  
  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    System.out.println("Token reconocido: " + yytext());
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }


  private void error(String message) {
    System.out.println("Error en linea line "+(yyline+1)+", columna "+(yycolumn+1)+" : "+message);
  }

  private String removeBrackets(String texto){
    if (texto.startsWith("[")) {
      texto = texto.substring(1);
    }
    if (texto.endsWith("]")) {
      texto = texto.substring(0, texto.length() - 1);
    }
    
    //String resultado = texto.substring(1, texto.length() - 1);
    return texto; 
  }

  private String removeTag(String texto){
    if (texto.startsWith("<etiqueta valor=\"")) {
      texto = texto.substring(16);
    }
    if (texto.endsWith("\">")) {
      texto = texto.substring(0, texto.length() - 2);
    }
    
    return texto; 
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public WebManagerLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("No se reconocio el lexema " + yytext() + " como un token valido y se ignoro.");
            }
          // fall through
          case 53: break;
          case 2:
            { return symbol(sym.PRM_VAL_TIT,   removeBrackets(yytext()));
            }
          // fall through
          case 54: break;
          case 3:
            { return symbol(sym.PRM_VAL_ID,    removeBrackets(yytext()));
            }
          // fall through
          case 55: break;
          case 4:
            { return symbol(sym.ATR_VAL_INTG,  removeBrackets(yytext()));
            }
          // fall through
          case 56: break;
          case 5:
            { return symbol(sym.ATR_VAL_TEXT,  removeBrackets(yytext()));
            }
          // fall through
          case 57: break;
          case 6:
            { return symbol(sym.ATR_VAL_COLH,  removeBrackets(yytext()));
            }
          // fall through
          case 58: break;
          case 7:
            { return symbol(sym.CLASS_TYPE_MEN, removeBrackets(yytext()));
            }
          // fall through
          case 59: break;
          case 8:
            { return symbol(sym.CLASS_TYPE_VID, removeBrackets(yytext()));
            }
          // fall through
          case 60: break;
          case 9:
            { return symbol(sym.CLASS_TYPE_IMG, removeBrackets(yytext()));
            }
          // fall through
          case 61: break;
          case 10:
            { return symbol(sym.CLASS_TYPE_TIT, removeBrackets(yytext()));
            }
          // fall through
          case 62: break;
          case 11:
            { return symbol(sym.ACCION_CL,    yytext());
            }
          // fall through
          case 63: break;
          case 12:
            { return symbol(sym.ATR_VAL_CENT,  removeBrackets(yytext()));
            }
          // fall through
          case 64: break;
          case 13:
            { return symbol(sym.ATR_VAL_DERE,  removeBrackets(yytext()));
            }
          // fall through
          case 65: break;
          case 14:
            { return symbol(sym.CLASS_TYPE_PAR, removeBrackets(yytext()));
            }
          // fall through
          case 66: break;
          case 15:
            { return symbol(sym.ACCIONES_OP,  yytext());
            }
          // fall through
          case 67: break;
          case 16:
            { return symbol(sym.ACCIONES_CL,  yytext());
            }
          // fall through
          case 68: break;
          case 17:
            { return symbol(sym.ATRIBUTO_CL,    yytext());
            }
          // fall through
          case 69: break;
          case 18:
            { return symbol(sym.ATRIBUTOS_OP,   yytext());
            }
          // fall through
          case 70: break;
          case 19:
            { return symbol(sym.ETIQUETAS_OP, yytext())           ;
            }
          // fall through
          case 71: break;
          case 20:
            { return symbol(sym.PRM_VAL_FCH,   removeBrackets(yytext()));
            }
          // fall through
          case 72: break;
          case 21:
            { return symbol(sym.ATR_VAL_IZQD,  removeBrackets(yytext()));
            }
          // fall through
          case 73: break;
          case 22:
            { return symbol(sym.ATRIBUTOS_CL,   yytext());
            }
          // fall through
          case 74: break;
          case 23:
            { return symbol(sym.ETIQUETAS_CL, yytext())           ;
            }
          // fall through
          case 75: break;
          case 24:
            { return symbol(sym.PARAMETRO_CL,   yytext());
            }
          // fall through
          case 76: break;
          case 25:
            { return symbol(sym.PARAMETROS_OP,  yytext());
            }
          // fall through
          case 77: break;
          case 26:
            { return symbol(sym.ATR_VAL_JUST,  removeBrackets(yytext()));
            }
          // fall through
          case 78: break;
          case 27:
            { return symbol(sym.PARAMETROS_CL,  yytext());
            }
          // fall through
          case 79: break;
          case 28:
            { return symbol(sym.ETIQUETA    , removeTag(yytext()));
            }
          // fall through
          case 80: break;
          case 29:
            { return symbol(sym.PARAM_TYPE_ID,  yytext());
            }
          // fall through
          case 81: break;
          case 30:
            { return symbol(sym.ATR_TYPE_ANC,   yytext());
            }
          // fall through
          case 82: break;
          case 31:
            { return symbol(sym.ATR_TYPE_CLR,   yytext());
            }
          // fall through
          case 83: break;
          case 32:
            { return symbol(sym.ATR_TYPE_TXT,   yytext());
            }
          // fall through
          case 84: break;
          case 33:
            { return symbol(sym.ATR_TYPE_ALT,   yytext());
            }
          // fall through
          case 85: break;
          case 34:
            { return symbol(sym.ATR_TYPE_ORI,   yytext());
            }
          // fall through
          case 86: break;
          case 35:
            { return symbol(sym.PARAM_TYPE_CLS, yytext());
            }
          // fall through
          case 87: break;
          case 36:
            { return symbol(sym.PARAM_TYPE_PAD, yytext());
            }
          // fall through
          case 88: break;
          case 37:
            { return symbol(sym.PARAM_TYPE_SIT, yytext());
            }
          // fall through
          case 89: break;
          case 38:
            { return symbol(sym.PARAM_TYPE_PAG, yytext());
            }
          // fall through
          case 90: break;
          case 39:
            { return symbol(sym.PARAM_TYPE_TIT, yytext());
            }
          // fall through
          case 91: break;
          case 40:
            { return symbol(sym.ACC_ADD_PAGW, yytext());
            }
          // fall through
          case 92: break;
          case 41:
            { return symbol(sym.ACC_DEL_PAGW, yytext());
            }
          // fall through
          case 93: break;
          case 42:
            { return symbol(sym.ATR_TYPE_ALN,   yytext());
            }
          // fall through
          case 94: break;
          case 43:
            { return symbol(sym.ACC_ADD_WBST, yytext());
            }
          // fall through
          case 95: break;
          case 44:
            { return symbol(sym.ACC_MOD_PAGW, yytext());
            }
          // fall through
          case 96: break;
          case 45:
            { return symbol(sym.ACC_DEL_COMP, yytext());
            }
          // fall through
          case 97: break;
          case 46:
            { return symbol(sym.ACC_ADD_COMP, yytext());
            }
          // fall through
          case 98: break;
          case 47:
            { return symbol(sym.PARAM_TYPE_FCR, yytext());
            }
          // fall through
          case 99: break;
          case 48:
            { return symbol(sym.ACC_MOD_COMP, yytext());
            }
          // fall through
          case 100: break;
          case 49:
            { return symbol(sym.PARAM_TYPE_USC, yytext());
            }
          // fall through
          case 101: break;
          case 50:
            { return symbol(sym.ACC_DEL_WBST, yytext());
            }
          // fall through
          case 102: break;
          case 51:
            { return symbol(sym.PARAM_TYPE_FMD, yytext());
            }
          // fall through
          case 103: break;
          case 52:
            { return symbol(sym.PARAM_TYPE_USM, yytext());
            }
          // fall through
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
